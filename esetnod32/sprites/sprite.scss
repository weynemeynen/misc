/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/

$comments-name: 'comments';
$comments-x: 34px;
$comments-y: 47px;
$comments-offset-x: -34px;
$comments-offset-y: -47px;
$comments-width: 21px;
$comments-height: 12px;
$comments-total-width: 102px;
$comments-total-height: 83px;
$comments-image: 'sprite.png';
$comments: (34px, 47px, -34px, -47px, 21px, 12px, 102px, 83px, 'sprite.png', 'comments', );
$download-alt-name: 'download-alt';
$download-alt-x: 55px;
$download-alt-y: 47px;
$download-alt-offset-x: -55px;
$download-alt-offset-y: -47px;
$download-alt-width: 21px;
$download-alt-height: 12px;
$download-alt-total-width: 102px;
$download-alt-total-height: 83px;
$download-alt-image: 'sprite.png';
$download-alt: (55px, 47px, -55px, -47px, 21px, 12px, 102px, 83px, 'sprite.png', 'download-alt', );
$eye-open-name: 'eye-open';
$eye-open-x: 16px;
$eye-open-y: 67px;
$eye-open-offset-x: -16px;
$eye-open-offset-y: -67px;
$eye-open-width: 21px;
$eye-open-height: 12px;
$eye-open-total-width: 102px;
$eye-open-total-height: 83px;
$eye-open-image: 'sprite.png';
$eye-open: (16px, 67px, -16px, -67px, 21px, 12px, 102px, 83px, 'sprite.png', 'eye-open', );
$facebook-name: 'facebook';
$facebook-x: 92px;
$facebook-y: 0px;
$facebook-offset-x: -92px;
$facebook-offset-y: 0px;
$facebook-width: 10px;
$facebook-height: 18px;
$facebook-total-width: 102px;
$facebook-total-height: 83px;
$facebook-image: 'sprite.png';
$facebook: (92px, 0px, -92px, 0px, 10px, 18px, 102px, 83px, 'sprite.png', 'facebook', );
$google-plus-name: 'google-plus';
$google-plus-x: 0px;
$google-plus-y: 67px;
$google-plus-offset-x: 0px;
$google-plus-offset-y: -67px;
$google-plus-width: 16px;
$google-plus-height: 16px;
$google-plus-total-width: 102px;
$google-plus-total-height: 83px;
$google-plus-image: 'sprite.png';
$google-plus: (0px, 67px, 0px, -67px, 16px, 16px, 102px, 83px, 'sprite.png', 'google-plus', );
$pinterest-name: 'pinterest';
$pinterest-x: 0px;
$pinterest-y: 47px;
$pinterest-offset-x: 0px;
$pinterest-offset-y: -47px;
$pinterest-width: 16px;
$pinterest-height: 20px;
$pinterest-total-width: 102px;
$pinterest-total-height: 83px;
$pinterest-image: 'sprite.png';
$pinterest: (0px, 47px, 0px, -47px, 16px, 20px, 102px, 83px, 'sprite.png', 'pinterest', );
$q-left-name: 'q-left';
$q-left-x: 0px;
$q-left-y: 0px;
$q-left-offset-x: 0px;
$q-left-offset-y: 0px;
$q-left-width: 46px;
$q-left-height: 47px;
$q-left-total-width: 102px;
$q-left-total-height: 83px;
$q-left-image: 'sprite.png';
$q-left: (0px, 0px, 0px, 0px, 46px, 47px, 102px, 83px, 'sprite.png', 'q-left', );
$q-right-name: 'q-right';
$q-right-x: 46px;
$q-right-y: 0px;
$q-right-offset-x: -46px;
$q-right-offset-y: 0px;
$q-right-width: 46px;
$q-right-height: 47px;
$q-right-total-width: 102px;
$q-right-total-height: 83px;
$q-right-image: 'sprite.png';
$q-right: (46px, 0px, -46px, 0px, 46px, 47px, 102px, 83px, 'sprite.png', 'q-right', );
$twitter-name: 'twitter';
$twitter-x: 16px;
$twitter-y: 47px;
$twitter-offset-x: -16px;
$twitter-offset-y: -47px;
$twitter-width: 18px;
$twitter-height: 15px;
$twitter-total-width: 102px;
$twitter-total-height: 83px;
$twitter-image: 'sprite.png';
$twitter: (16px, 47px, -16px, -47px, 18px, 15px, 102px, 83px, 'sprite.png', 'twitter', );
$spritesheet-width: 102px;
$spritesheet-height: 83px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($comments, $download-alt, $eye-open, $facebook, $google-plus, $pinterest, $q-left, $q-right, $twitter, );
$spritesheet: (102px, 83px, 'sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/

@mixin sprite-width($sprite) {
    width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
    height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
    $sprite-offset-x: nth($sprite, 3);
    $sprite-offset-y: nth($sprite, 4);
    background-position: $sprite-offset-x $sprite-offset-y;
}

@mixin sprite-image($sprite) {
    $sprite-image: nth($sprite, 9);
    background-image: url(../sprites/#{$sprite-image});
}

@mixin sprite($sprite) {
    @include sprite-image($sprite);
    @include sprite-position($sprite);
    @include sprite-width($sprite);
    @include sprite-height($sprite);
}


/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/

@mixin sprites($sprites) {
    @each $sprite in $sprites {
        $sprite-name: nth($sprite, 10);
        .#{$sprite-name} {
            @include sprite($sprite);
        }
    }
}
